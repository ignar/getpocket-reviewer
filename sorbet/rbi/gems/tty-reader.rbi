# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/tty-reader/all/tty-reader.rbi
#
# tty-reader-0.8.0

module TTY
end
class TTY::Reader
  def add_to_history(line); end
  def clear_display(line, screen_width); end
  def console; end
  def count_screen_lines(line_or_size, screen_width = nil); end
  def cursor; end
  def env; end
  def get_codes(options = nil, codes = nil); end
  def handle_interrupt; end
  def history_next; end
  def history_next?; end
  def history_previous; end
  def history_previous?; end
  def initialize(**options); end
  def input; end
  def inspect; end
  def keyctrl_d(*arg0); end
  def keyctrl_z(*arg0); end
  def old_subcribe(listener, options = nil); end
  def output; end
  def read_char(options = nil); end
  def read_keypress(options = nil); end
  def read_line(prompt = nil, **options); end
  def read_lines(*args); end
  def read_multiline(*args); end
  def select_console(input); end
  def self.windows?; end
  def subscribe(listener, options = nil); end
  def track_history; end
  def track_history?; end
  def trigger(event, *args); end
  def trigger_key_event(char, line: nil); end
  def unbufferred(&block); end
  def unsubscribe(listener); end
  extend Wisper::Publisher::ClassMethods
  include Wisper::Publisher
end
class TTY::Reader::History
  def <<(line); end
  def [](index); end
  def clear; end
  def cycle; end
  def cycle=(arg0); end
  def duplicates; end
  def duplicates=(arg0); end
  def each; end
  def exclude; end
  def exclude=(arg0); end
  def get; end
  def index; end
  def initialize(max_size = nil, **options); end
  def inspect(*args, &block); end
  def length(*args, &block); end
  def max_size; end
  def max_size=(arg0); end
  def next; end
  def next?; end
  def previous; end
  def previous?; end
  def push(line); end
  def size(*args, &block); end
  def to_s(*args, &block); end
  extend Forwardable
  include Enumerable
end
class TTY::Reader::Line
  def <<(char); end
  def [](i); end
  def []=(i, chars); end
  def cursor; end
  def delete(n = nil); end
  def edit_mode; end
  def editing?; end
  def end?; end
  def initialize(text = nil, prompt: nil); end
  def insert(chars); end
  def inspect; end
  def left(n = nil); end
  def length; end
  def mode; end
  def move_to_end; end
  def move_to_start; end
  def prompt; end
  def prompt_size; end
  def remove(n = nil); end
  def replace(text); end
  def replace_mode; end
  def replacing?; end
  def right(n = nil); end
  def self.sanitize(text); end
  def size; end
  def start?; end
  def text; end
  def text_size; end
  def to_s; end
end
module TTY::Reader::Keys
  def ctrl_keys; end
  def keys; end
  def self.ctrl_keys; end
  def self.keys; end
  def self.win_keys; end
  def win_keys; end
end
class Anonymous_Struct_55 < Struct
  def ctrl; end
  def ctrl=(_); end
  def meta; end
  def meta=(_); end
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def shift; end
  def shift=(_); end
end
class TTY::Reader::Key < Anonymous_Struct_55
  def initialize(*arg0); end
end
class Anonymous_Struct_56 < Struct
  def key; end
  def key=(_); end
  def line; end
  def line=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def value; end
  def value=(_); end
end
class TTY::Reader::KeyEvent < Anonymous_Struct_56
  def self.from(keys, char, line = nil); end
  def trigger?; end
end
class TTY::Reader::Mode
  def echo(is_on = nil, &block); end
  def initialize(input = nil); end
  def raw(is_on = nil, &block); end
end
class TTY::Reader::Console
  def escape_codes; end
  def get_char(options); end
  def initialize(input); end
  def input; end
  def keys; end
  def mode; end
end
class TTY::Reader::WinConsole
  def escape_codes; end
  def get_char(options); end
  def get_char_blocking; end
  def get_char_echo_blocking; end
  def get_char_echo_non_blocking; end
  def get_char_non_blocking; end
  def initialize(input); end
  def input_ready?; end
  def keys; end
end
class TTY::Reader::InputInterrupt < Interrupt
end
