# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/strings/all/strings.rbi
#
# strings-0.2.0

module Strings
  def align(*args, **kws); end
  def align_center(*args); end
  def align_left(*args); end
  def align_right(*args); end
  def ansi?(string); end
  def fold(*args); end
  def pad(*args); end
  def sanitize(string); end
  def self.align(*args, **kws); end
  def self.align_center(*args); end
  def self.align_left(*args); end
  def self.align_right(*args); end
  def self.ansi?(string); end
  def self.fold(*args); end
  def self.pad(*args); end
  def self.sanitize(string); end
  def self.truncate(*args); end
  def self.wrap(*args); end
  def truncate(*args); end
  def wrap(*args); end
end
module Strings::Align
  def align(text, width, direction: nil, **options); end
  def align_center(text, width, fill: nil, separator: nil); end
  def align_left(text, width, fill: nil, separator: nil); end
  def align_right(text, width, fill: nil, separator: nil); end
  def display_width(string); end
  def each_line(text, separator); end
  def self.align(text, width, direction: nil, **options); end
  def self.align_center(text, width, fill: nil, separator: nil); end
  def self.align_left(text, width, fill: nil, separator: nil); end
  def self.align_right(text, width, fill: nil, separator: nil); end
  def self.display_width(string); end
  def self.each_line(text, separator); end
  def self.to_alignment(direction); end
  def to_alignment(direction); end
end
module Strings::Fold
  def fold(text, separator = nil); end
  def self.fold(text, separator = nil); end
end
class Strings::Padder
  def bottom; end
  def bottom=(value); end
  def empty?; end
  def initialize(padding); end
  def left; end
  def left=(value); end
  def padding; end
  def right; end
  def right=(value); end
  def self.convert_to_ary(value); end
  def self.parse(value = nil); end
  def to_s; end
  def top; end
  def top=(value); end
end
class Strings::Padder::ParseError < ArgumentError
end
module Strings::Pad
  def display_width(string); end
  def max_line_length(text, separator); end
  def pad(text, padding, fill: nil, separator: nil); end
  def pad_around(text, padding, fill: nil); end
  def self.display_width(string); end
  def self.max_line_length(text, separator); end
  def self.pad(text, padding, fill: nil, separator: nil); end
  def self.pad_around(text, padding, fill: nil); end
end
module Strings::Truncate
  def display_width(string); end
  def self.display_width(string); end
  def self.shorten(original_chars, chars, length_without_trailing); end
  def self.to_chars(text); end
  def self.truncate(text, truncate_at = nil, options = nil); end
  def shorten(original_chars, chars, length_without_trailing); end
  def to_chars(text); end
  def truncate(text, truncate_at = nil, options = nil); end
end
module Strings::Wrap
  def display_width(string); end
  def format_line(text_line, wrap_at, ansi_stack); end
  def insert_ansi(string, ansi_stack = nil); end
  def self.display_width(string); end
  def self.format_line(text_line, wrap_at, ansi_stack); end
  def self.insert_ansi(string, ansi_stack = nil); end
  def self.wrap(text, wrap_at = nil, separator: nil); end
  def wrap(text, wrap_at = nil, separator: nil); end
end
