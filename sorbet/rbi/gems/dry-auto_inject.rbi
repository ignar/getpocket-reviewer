# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dry-auto_inject/all/dry-auto_inject.rbi
#
# dry-auto_inject-0.7.0

module Dry
  def self.AutoInject(container, options = nil); end
end
module Dry::AutoInject
end
class Dry::AutoInject::DuplicateDependencyError < StandardError
end
class Dry::AutoInject::DependencyNameInvalid < StandardError
end
class Dry::AutoInject::DependencyMap
  def add_dependency(name, identifier); end
  def initialize(*dependencies); end
  def inspect; end
  def name_for(identifier); end
  def names; end
  def to_h; end
  def to_hash; end
end
class Dry::AutoInject::Strategies
  def self.register_default(name, strategy); end
  extend Anonymous_Module_57
  extend Dry::Configurable
  extend Dry::Configurable::ClassMethods
  extend Dry::Container::Mixin
end
class Dry::AutoInject::Strategies::Constructor < Module
  def class_mod; end
  def container; end
  def define_initialize(klass); end
  def define_new; end
  def define_readers; end
  def dependency_map; end
  def included(klass); end
  def initialize(container, *dependency_names); end
  def instance_mod; end
end
class Dry::AutoInject::Strategies::Constructor::ClassMethods < Module
end
class Dry::AutoInject::Strategies::Constructor::InstanceMethods < Module
end
class Dry::AutoInject::MethodParameters
  def empty?; end
  def initialize(parameters); end
  def keyword?(name); end
  def keyword_names; end
  def length; end
  def parameters; end
  def pass_through?; end
  def self.of(obj, name); end
  def sequential_arguments?; end
  def splat?; end
end
class Dry::AutoInject::Strategies::Args < Dry::AutoInject::Strategies::Constructor
  def define_initialize(klass); end
  def define_initialize_with_params; end
  def define_initialize_with_splat(super_parameters); end
  def define_new; end
end
class Dry::AutoInject::Strategies::Hash < Dry::AutoInject::Strategies::Constructor
  def define_initialize(klass); end
  def define_new; end
end
class Dry::AutoInject::Strategies::Kwargs < Dry::AutoInject::Strategies::Constructor
  def assign_dependencies(kwargs, destination); end
  def define_initialize(klass); end
  def define_initialize_with_keywords(super_parameters); end
  def define_initialize_with_splat(super_parameters); end
  def define_new; end
  def slice_kwargs(kwargs, super_parameters); end
end
module Anonymous_Module_57
  def inherited(subclass); end
end
class Dry::AutoInject::Injector < BasicObject
  def [](*dependency_names); end
  def builder; end
  def container; end
  def initialize(container, strategy, builder:); end
  def method_missing(name, *args, &block); end
  def respond_to?(name, include_private = nil); end
  def strategy; end
end
class Dry::AutoInject::Builder < BasicObject
  def [](*dependency_names); end
  def container; end
  def initialize(container, options = nil); end
  def method_missing(name, *args, &block); end
  def respond_to?(name, include_private = nil); end
  def strategies; end
end
